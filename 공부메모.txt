자바 스크립트는 웹에서만 동작 할 수 있었다.
V8이 오프 소스로 공개되면서 탈 웹화 되었다.
Node.js의 장점은 속도이다. 속도가 빠른 이유는 구글의 V8 엔진을 사용하기 때문이다.

모듈은 부품이라 생각하면 편함

require('http'); 는 node.js가 http라는 모듈을 사용한다 라는 뜻이다. (모듈을 return한다.)

NPM(Node Package Manager): Node계의 앱스토어

uglifyjs는 코드를 짧게 줄여주는 패키지이다.

NPM을 사용하여 모듈을 다운 받을 때에는 다운 받을 폴더를 현재 디렉토리를 패키지로 지정해야한다.

npm init
	name: //그냥 enter 입력시 가로안의 값이 입력
	description: //가로가 없으니 직접 쓰는 것을 권장
	entry point: //이 패키지에 어떤 자바스크립트가 이 패키지를 구동하는 자바스크립트 인가
	test command: //이 패키지에서 tdd를 하게되면 어떤 명령어를 입력하면 테스트를 실행시키는가
	git repository: //이 프로잭트가 git에 올라가게 된다면 git의 주소를 입력(사전에 등록되어 있으면 자동으로 등록)

underscore는 javascript가 가지고 있는 배열의 기능이 빈약해서 그것을 채워주는 기능이 많다.

npm install
	[-g]는 독립적인 소프트웨어를 설치함 미사용시 부품으로서 설치
	[--save]는 새로운 프로젝트를 해도 package.json파일만 있다면 쉽게 모듈을 자신의 프로젝트에 포함시킬 수 있다. 하지만 일시적으로 사용할때에는 --save를 제외하고 실행시킨다.
	[init]는 현재 디렉토리를 npm 패키지로 초기화

callback 함수는 누군가에게 호출 당할 함수

동기 프로그래밍이란 여라가지 일을 실행할때 순차적으로 한 작업이 끝나면 다음 작업을 실행하고 return받는 형식이고
비동기 프로그래밍이란 여라가지 일을 실행할때 순차적으로 작업을 지시하고 끝난는 순서대로 return받는 형식

node.js이 메소드에서 뒤에 Sync가 붙지 않으면 비동기 방식의 메소드이다.

IO가 필요한 작업들은 비동기 형식으로 작업되고 필요의하여 뒤에 Sync를 붙여 동기형식으로 할 수 있지만 되도록 사용을 권하지 않음.

Node.js는 싱글 쓰레드 방식이기 때문에 만약 모든 코드를 동기 방식으로 하여 웹을 만든다면 작업이 끝날때까지 아무도 그 웹에 접속하지 못하는 상황이 발생 할 수도 있다.

express에서 app.get 메소드는 어떠한 경로로 들어왔을때 어떤 실행을 할 것인가 연결해주는 역할을 한다. 이를 라우팅이라하며 이러한 메소드를 라우터라고 부른다.

웹 서버 구축시 동적인 코딩과 정적인 코딩의 장점을 다 모아서 코딩할 수 있게 가능하는 것이 템플릿 엔지이다.

